/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyLearningImport } from './routes/my-learning'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as CoursesImport } from './routes/courses'
import { Route as IndexImport } from './routes/index'
import { Route as CourseCourseIdImport } from './routes/course/$courseId'
import { Route as CourseCourseIdLearnImport } from './routes/course/$courseId/learn'

// Create/Update Routes

const MyLearningRoute = MyLearningImport.update({
  id: '/my-learning',
  path: '/my-learning',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const CoursesRoute = CoursesImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CourseCourseIdRoute = CourseCourseIdImport.update({
  id: '/course/$courseId',
  path: '/course/$courseId',
  getParentRoute: () => rootRoute,
} as any)

const CourseCourseIdLearnRoute = CourseCourseIdLearnImport.update({
  id: '/learn',
  path: '/learn',
  getParentRoute: () => CourseCourseIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/my-learning': {
      id: '/my-learning'
      path: '/my-learning'
      fullPath: '/my-learning'
      preLoaderRoute: typeof MyLearningImport
      parentRoute: typeof rootRoute
    }
    '/course/$courseId': {
      id: '/course/$courseId'
      path: '/course/$courseId'
      fullPath: '/course/$courseId'
      preLoaderRoute: typeof CourseCourseIdImport
      parentRoute: typeof rootRoute
    }
    '/course/$courseId/learn': {
      id: '/course/$courseId/learn'
      path: '/learn'
      fullPath: '/course/$courseId/learn'
      preLoaderRoute: typeof CourseCourseIdLearnImport
      parentRoute: typeof CourseCourseIdImport
    }
  }
}

// Create and export the route tree

interface CourseCourseIdRouteChildren {
  CourseCourseIdLearnRoute: typeof CourseCourseIdLearnRoute
}

const CourseCourseIdRouteChildren: CourseCourseIdRouteChildren = {
  CourseCourseIdLearnRoute: CourseCourseIdLearnRoute,
}

const CourseCourseIdRouteWithChildren = CourseCourseIdRoute._addFileChildren(
  CourseCourseIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/my-learning': typeof MyLearningRoute
  '/course/$courseId': typeof CourseCourseIdRouteWithChildren
  '/course/$courseId/learn': typeof CourseCourseIdLearnRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/my-learning': typeof MyLearningRoute
  '/course/$courseId': typeof CourseCourseIdRouteWithChildren
  '/course/$courseId/learn': typeof CourseCourseIdLearnRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/my-learning': typeof MyLearningRoute
  '/course/$courseId': typeof CourseCourseIdRouteWithChildren
  '/course/$courseId/learn': typeof CourseCourseIdLearnRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/courses'
    | '/dashboard'
    | '/my-learning'
    | '/course/$courseId'
    | '/course/$courseId/learn'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/courses'
    | '/dashboard'
    | '/my-learning'
    | '/course/$courseId'
    | '/course/$courseId/learn'
  id:
    | '__root__'
    | '/'
    | '/courses'
    | '/dashboard'
    | '/my-learning'
    | '/course/$courseId'
    | '/course/$courseId/learn'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoursesRoute: typeof CoursesRoute
  DashboardRoute: typeof DashboardRoute
  MyLearningRoute: typeof MyLearningRoute
  CourseCourseIdRoute: typeof CourseCourseIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoursesRoute: CoursesRoute,
  DashboardRoute: DashboardRoute,
  MyLearningRoute: MyLearningRoute,
  CourseCourseIdRoute: CourseCourseIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/courses",
        "/dashboard",
        "/my-learning",
        "/course/$courseId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/courses": {
      "filePath": "courses.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/my-learning": {
      "filePath": "my-learning.tsx"
    },
    "/course/$courseId": {
      "filePath": "course/$courseId.tsx",
      "children": [
        "/course/$courseId/learn"
      ]
    },
    "/course/$courseId/learn": {
      "filePath": "course/$courseId/learn.tsx",
      "parent": "/course/$courseId"
    }
  }
}
ROUTE_MANIFEST_END */
